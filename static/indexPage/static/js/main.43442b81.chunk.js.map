{"version":3,"sources":["logo.svg","qhome/qhome_main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","QPost","Component","react_default","a","createElement","className","this","props","title","date","author","text","React","QPostList","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","posts","_this2","fetch","window","__SVR_DATA__","api_addr","then","results","json","data","i","map","qhome_main_QPost","key","post_title","post_date","post_author","post_text","setState","QHome","qhome_main_QPostList","Boolean","location","hostname","match","ReactDOM","render","qhome_qhome_main","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,yQCGlCC,SCCYC,6LDCV,OACAC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAEXH,EAAAC,EAAAC,cAAA,oBAAYE,KAAKC,MAAMC,OACvBN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAcH,EAAAC,EAAAC,cAAA,SAAIE,KAAKC,MAAME,OAC5CP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAgBH,EAAAC,EAAAC,cAAA,eAAOE,KAAKC,MAAMG,SACjDR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACVC,KAAKC,MAAMI,MAEhBT,EAAAC,EAAAC,cAAA,mBAXQQ,IAAMX,YAgBpBY,cACF,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAT,KAAAO,IACTC,EAAAC,OAAAE,EAAA,EAAAF,CAAAT,KAAAS,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAb,QACKc,MAAO,CACRC,MAAO,IAHFP,mFAMM,IAAAQ,EAAAhB,KACfiB,MAAM,IAAMC,OAAOC,aAAaC,SAAW,WAAWC,KAAK,SAAAC,GACvD,OAAOA,EAAQC,SAChBF,KAAK,SAAAG,GACJ,IAAIC,EAAI,EACJV,EAAQS,EAAKF,QAAQI,IAAI,SAACF,GAC1B,OACI5B,EAAAC,EAAAC,cAAC6B,EAAD,CACIC,IAAKH,IACLvB,MAAOsB,EAAKK,WACZ1B,KAAMqB,EAAKM,UACX1B,OAAQoB,EAAKO,YACb1B,KAAMmB,EAAKQ,cAGvBhB,EAAKiB,SAAS,CAAClB,MAAOA,uCAI1B,OAAOnB,EAAAC,EAAAC,cAAA,WAAME,KAAKc,MAAMC,cA1BRT,IAAMX,WAwCfuC,mLARP,OACItC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAACqC,EAAD,cAJI7B,IAAMX,WErCNyC,QACW,cAA7BlB,OAAOmB,SAASC,UAEe,UAA7BpB,OAAOmB,SAASC,UAEhBpB,OAAOmB,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAAWC,SAASC,eAAe,SDsH7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC","file":"static/js/main.43442b81.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react';\r\nimport App from \"../App\";\r\n\r\nclass QPost extends React.Component {\r\n      render() {\r\n        return (\r\n        <div className=\"q-post\">\r\n\r\n            <h3>Title: {this.props.title}</h3>\r\n            <div className=\"q-post-date\"><p>{this.props.date}</p></div>\r\n            <div className=\"q-post-author\"><p>By {this.props.author}</p></div>\r\n            <div className=\"q-post-text\">\r\n                {this.props.text}\r\n            </div>\r\n            <hr/>\r\n        </div>\r\n        );\r\n      }\r\n}\r\nclass QPostList extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state ={\r\n            posts: [],\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        fetch(\"/\" + window.__SVR_DATA__.api_addr + \"/posts/\").then(results => {\r\n            return results.json();\r\n        }).then(data => {\r\n            var i = 0;\r\n            let posts = data.results.map((data) => {\r\n                return(\r\n                    <QPost\r\n                        key={i++}\r\n                        title={data.post_title}\r\n                        date={data.post_date}\r\n                        author={data.post_author}\r\n                        text={data.post_text} />\r\n                )\r\n            })\r\n            this.setState({posts: posts});\r\n        })\r\n    }\r\n    render(){\r\n        return <div>{this.state.posts}</div>\r\n    }\r\n}\r\n\r\nclass QHome extends React.Component {\r\n      render() {\r\n        return (\r\n            <div className=\"q-home\">\r\n                <QPostList/>\r\n            </div>\r\n        );\r\n      }\r\n}\r\n\r\nexport default QHome;","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <p>\r\n            Edit <code>src/App.js</code> and save to reload.\r\n          </p>\r\n          <a\r\n            className=\"App-link\"\r\n            href=\"https://reactjs.org\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Learn React\r\n          </a>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport './qhome/qhome_main.css';\r\nimport QHome from './qhome/qhome_main';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<QHome />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}